<resources>
    <string name="app_name">Java Programming</string>
    <string name="home">Home</string>
    <string name="program">Program</string>
    <string name="about_app">About App</string>
    <string name="c_programming">C++ Programming</string>
    <string name="img">img</string>
    <string name="interview_questions">Interview Questions</string>
    <string name="Open_Drawer">Open Drawer</string>
    <string name="Close_Drawer">Close Drawer</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="java_programming">Java Programming</string>
    <string name="top_10_questions">Top 10 Questions That Are Asked in The Interview.</string>
    <string name="_1_what_is_java">1. What is Java?</string>
    <string name="_2_what_are_the_oops">2. What are the OOPs, and how does Java support them?</string>
    <string name="_3_what_is_the_difference_between_jdk_jre_and_jvm">3. What is the difference between JDK, JRE, and JVM?</string>
    <string name="_4_explain_the_significance_">4. Explain the significance of the main method in Java.</string>
    <string name="_6_what_is_the_difference_">6. What is the difference between equals() and == in Java?</string>
    <string name="_7_what_is_the_java_memory">7. What is the Java Memory Management Model?</string>
    <string name="_8_what_are_the_different_access_modifiers_in_java_">8. What are the different access modifiers in Java, and what do they signify?</string>
    <string name="_9_what_is_the_purpose_of_the_try_">9. What is the purpose of the try, catch, finally, and throw keywords in exception handling?</string>
    <string name="_10_what_is_multithreading_i">10. What is multithreading in Java, and how can it be achieved?</string>
    <string name="encapsulation_is">Encapsulation is achieved when the object of the class maintains the private state. Other objects are not allowed to access these objects; despite that, the other objects can only access or invoke the list of public functions.</string>
    <string name="in_simple_word">In simple words, encapsulation means wrapping the data, methods into the class, i.e., into a single unit. Encapsulation automatically accepts the data hiding by making variables private and access them with the help of methods that are public. Access modifiers are used to accomplished data hiding.</string>
    <string name="encapsulation_program">class Person {\n    private int age;\n \n    public int getAge() {\n        return age;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n \nclass Main {\n    public static void main(String[] args) {\n        // create an object of Person\n        Person p1 = new Person();\n        p1.setAge(21);\n        \n        System.out.println(\"My age is \" + p1.getAge());\n    }\n}</string>
    <string name="java_is_widely">Java is a widely-used, high-level, object-oriented programming language that has played a significant role in the world of software development since its introduction in the mid-1990s. Developed by James Gosling and his team at Sun Microsystems, Java was designed with the goal of providing a platform-independent, versatile, and reliable programming language for a wide range of applications. \n</string>
    <string name="some_keys">Here\'s an introduction to some key aspects of Java:\n\n 1.Platform Independence\n2. Object-Oriented\n3. Strongly Typed\n4. Multi-Threaded\n5. Rich Standard Library\n6. Security\n7. Community and Ecosystem\n8. Garbage Collection\n9. Performance\n10.Versatile Applications</string>
    <string name="in_java_variable">In Java, a variable is a named storage location that holds data or values that can be used and manipulated within a program. Variables are used to store information that a Java program can access and modify during its execution. Each variable has a name, a data type, and a value</string>
    <string name="example_of_variable">1. Numeric Types:\n byte: 8-bit integer.\nshort: 16-bit integer.\nint: 32-bit integer.\nlong: 64-bit integer.\nfloat: 32-bit floating-point.\ndouble: 64-bit floating-point.</string>
    <string name="hello_world">public class HelloWorld { \n
    public static void main(String[] args) { \n
        System.out.println("Hello, World!"); \n
    } \n
}\n
</string>

    <string name="datatype_in_java">DataType in Java</string>
    <string name="chardata">\n 2. Character Type: \n char: 16-bit Unicode character.</string>
    <string name="booltype">\n\n 3. Boolean Type:\n boolean: Represents true or false values.</string>
    <string name="object_types">1. Object Types: \n Object: The root class for all Java classes. All classes in Java are reference types.</string>
    <string name="array_type">\n 2. Array Types:\n Arrays are reference types, and you can have arrays of primitive types or objects.</string>
    <string name="user_define_type">\n 3. User-Defined Types:\n Classes and interfaces that you define in your program.</string>
    <string name="array_def">An array is a data structure that allows you to store a collection of elements, all of the same type, under a single name. Each element in an array is identified by an index or a key, and the elements are stored in contiguous memory locations. Arrays are widely used in computer programming to organize and efficiently manipulate collections of data.</string>
    <string name="array_defi">\n\n In Java, an array is a data structure that allows you to store multiple values of the same type under a single variable name. Arrays are useful when you need to work with a collection of elements of the same data type.</string>
    <string name="array_declration">\n // Declaration \n int[] numbers; \n\n // Initialization using \'new\' keyword\nnumbers = new int[5]; // Creates an array of size 5\n\n// Initialization with values\nint[] myArray = {1, 2, 3, 4, 5};\n</string>
    <string name="array_program"><![CDATA[public class SimpleArrayExample {\n    public static void main(String[] args) {\n        // Declare and initialize an array of integers\n        int[] numbers = {10, 20, 30, 40, 50};\n\n        // Accessing and printing elements of the array\n        System.out.println(\"Elements of the array:\");\n        for (int i = 0; i < numbers.length; i++) {\n            System.out.println(\"Element at index \" + i + \": \" + numbers[i]);\n        }\n\n        // Modifying an element of the array\n        numbers[2] = 35;\n\n        // Displaying the modified array\n        System.out.println(\"\\nModified array:\");\n        for (int number : numbers) {\n            System.out.println(number);\n        }\n\n        // Summing up the elements of the array\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n\n        System.out.println(\"\\nSum of array elements: \" + sum);\n    }\n}\n]]></string>
    <string name="class_def">\nIn Java, a class is a blueprint or template that defines the structure and behavior of objects. Objects are instances of classes, and classes serve as a way to encapsulate data (attributes) and behavior (methods) into a single unit. The concept of classes and objects is a fundamental building block of object-oriented programming (OOP) in Java</string>
    <string name="object_def">In Java, an object is an instance of a class. It is a fundamental concept in object-oriented programming (OOP), where programs are designed around objects that represent real-world entities or concepts. Objects encapsulate data (attributes) and behavior (methods) into a single unit.</string>
    <string name="string_def">In Java, the String class is used to represent sequences of characters. Strings are widely used in Java programming for working with textual data. Here are some key points about strings in Java</string>
    <string name="string_prog">public class StringExample {\n    public static void main(String[] args) {\n        // Declaration and initialization of strings\n        String greeting = \"Hello,\";\n        String name = \"John\";\n\n        // Concatenation of strings\n        String message = greeting + \" \" + name + \"!\";\n\n        // Displaying the concatenated string\n        System.out.println(message);\n\n        // String length\n        int length = message.length();\n        System.out.println(\"Length of the message: \" + length);\n\n        // Accessing characters in a string\n        char firstChar = message.charAt(0);\n        char lastChar = message.charAt(message.length() - 1);\n        System.out.println(\"First character: \" + firstChar);\n        System.out.println(\"Last character: \" + lastChar);\n\n        // Substring\n        String subMessage = message.substring(7, 12);\n        System.out.println(\"Substring: \" + subMessage);\n\n        // Uppercase and lowercase\n        String upperCaseMessage = message.toUpperCase();\n        String lowerCaseMessage = message.toLowerCase();\n        System.out.println(\"Uppercase message: \" + upperCaseMessage);\n        System.out.println(\"Lowercase message: \" + lowerCaseMessage);\n\n        // String comparison\n        String compareString1 = \"Java\";\n        String compareString2 = \"java\";\n        boolean isEqual = compareString1.equals(compareString2);\n        System.out.println(\"String comparison: \" + isEqual);\n    }\n}\n</string>
    <string name="string_output">Hello, John!\nLength of the message: 13\nFirst character: H\nLast character: !\nSubstring: John\nUppercase message: HELLO, JOHN!\nLowercase message: hello, john!\nString comparison: false\n</string>
    <string name="loop_in_java">Loop in java \n\n 1. for loop \n 2. while loop \n 3. do while loop \n </string>
    <string name="for_loop">\n for loop\n\n</string>
    <string name="for_loop_prog"><![CDATA[public class HelloWorldLoop {\n    public static void main(String[] args) {\n        // Using a for loop to print \"Hello, World!\" ten times\n        for (int i = 0; i < 10; i++) {\n            System.out.println(\"Hello, World!\");\n        }\n    }\n}\n]]></string>
    <string name="while_loop">while loop\n </string>
    <string name="while_loop_prog"><![CDATA[public class HelloWorldLoop {\n    public static void main(String[] args) {\n        int count = 1; // Initialize a counter variable\n\n        while (count <= 10) { // Check the condition\n            System.out.println(\"Hello, World!\"); // Code to be repeated\n            count++; // Increment the counter variable\n        }\n    }\n}\n]]></string>
    <string name="do_while_loop">do while loop \n </string>
    <string name="do_while_loop_prog"><![CDATA[public class HelloWorldLoop {\n    public static void main(String[] args) {\n        int count = 0;\n\n        do {\n            System.out.println(\"Hello, World!\");\n            count++;\n        } while (count < 10);\n    }\n}\n]]></string>
    <string name="error">Error is a subclass of the Throwable class, and it indicates serious problems that a reasonable application should not try to catch. Errors are often associated with critical failures in the Java Virtual Machine (JVM) or issues that are beyond the control of the programmer. Examples of errors include OutOfMemoryError and StackOverflowError.</string>
    <string name="error_heading">Error </string>
    <string name="error_program">public class OutOfMemoryExample {\n    public static void main(String[] args) {\n        // This code intentionally causes an OutOfMemoryError\n        Object[] array = new Object[Integer.MAX_VALUE];\n    }\n}\n</string>
    <string name="error_program_heading">\n // Example of OutOfMemoryError</string>
    <string name="exception_prog">Exception is also a subclass of the Throwable class, but it represents exceptional conditions that a well-written Java application should anticipate and recover from. Exceptions are further divided into two categories: checked exceptions and unchecked exceptions.</string>
    <string name="exception_example">// Example of IOException (a checked exception)\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class IOExceptionExample {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(\"file.txt\"));\n            // Code that may throw IOException\n            reader.close();\n        } catch (IOException e) {\n            // Handle the exception\n            e.printStackTrace();\n        }\n    }\n}\n</string>
    <string name="abstraction_def">An abstract class is a class that cannot be instantiated on its own and may contain abstract methods (methods without a body) that must be implemented by its subclasses. Abstract classes can also have concrete methods with a complete implementation.</string>
    <string name="example">// Abstract class representing a shape\nabstract class Shape {\n    // Abstract method to calculate area (no implementation here)\n    public abstract double calculateArea();\n\n    // Concrete method shared by all shapes\n    public void display() {\n        System.out.println(\"This is a shape.\");\n    }\n}\n\n// Concrete subclass representing a rectangle\nclass Rectangle extends Shape {\n    // Attributes specific to Rectangle\n    private double length;\n    private double width;\n\n    // Constructor\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    // Implementation of the abstract method to calculate area for Rectangle\n    @Override\n    public double calculateArea() {\n        return length * width;\n    }\n}\n\n// Concrete subclass representing a circle\nclass Circle extends Shape {\n    // Attribute specific to Circle\n    private double radius;\n\n    // Constructor\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    // Implementation of the abstract method to calculate area for Circle\n    @Override\n    public double calculateArea() {\n        return Math.PI * radius * radius;\n    }\n}\n\npublic class AbstractionExample {\n    public static void main(String[] args) {\n        // Creating objects of concrete classes\n        Rectangle rectangle = new Rectangle(5, 10);\n        Circle circle = new Circle(7);\n\n        // Using abstract class reference to achieve abstraction\n        Shape shape1 = rectangle;\n        Shape shape2 = circle;\n\n        // Calling methods on abstract class references\n        shape1.display();\n        System.out.println(\"Area of Rectangle: \" + shape1.calculateArea());\n\n        shape2.display();\n        System.out.println(\"Area of Circle: \" + shape2.calculateArea());\n    }\n}\n</string>
    <string name="example_abs">\n Example</string>
    <string name="inheritance_def">Inheritance is a fundamental concept in object-oriented programming (OOP) that allows a new class to inherit properties and behaviors (fields and methods) from an existing class. The existing class is called the superclass or base class, and the new class is called the subclass or derived class. In Java, the extends keyword is used to establish an inheritance relationship.</string>
    <string name="inheritance_prog">// Base class (superclass)\nclass Animal {\n    String name;\n\n    // Constructor\n    public Animal(String name) {\n        this.name = name;\n    }\n\n    // Method in the superclass\n    public void makeSound() {\n        System.out.println(\"Some generic sound\");\n    }\n}\n\n// Derived class (subclass)\nclass Dog extends Animal {\n    // Additional attribute specific to Dog\n    String breed;\n\n    // Constructor\n    public Dog(String name, String breed) {\n        // Calling the constructor of the superclass using super\n        super(name);\n        this.breed = breed;\n    }\n\n    // Overriding the makeSound method in the subclass\n    @Override\n    public void makeSound() {\n        System.out.println(\"Woof! Woof!\");\n    }\n\n    // New method specific to Dog\n    public void fetch() {\n        System.out.println(\"Fetching the ball\");\n    }\n}\n\npublic class InheritanceExample {\n    public static void main(String[] args) {\n        // Creating an object of the subclass (Dog)\n        Dog myDog = new Dog(\"Buddy\", \"Labrador\");\n\n        // Accessing attributes and methods from both superclass and subclass\n        System.out.println(\"Name: \" + myDog.name);\n        System.out.println(\"Breed: \" + myDog.breed);\n\n        // Calling overridden method in the subclass\n        myDog.makeSound();\n\n        // Calling a method specific to the subclass\n        myDog.fetch();\n    }\n}\n</string>
    <string name="polymorphism_def">\nPolymorphism is one of the four main pillars of object-oriented programming (OOP) and refers to the ability of objects to take on multiple forms. In Java, polymorphism is achieved through two mechanisms: method overloading and method overriding.</string>
    <string name="method_overloading">Method overloading allows a class to define multiple methods with the same name but with different parameter lists (different types or a different number of parameters). The compiler determines which method to call based on the number and types of arguments passed.</string>
    <string name="method_overriding">Method overriding occurs when a subclass provides a specific implementation for a method that is already defined in its superclass. This allows a subclass to provide a specialized version of a method while maintaining a common interface.</string>
    <string name="method_overloading_prog">public class Calculator {\n    // Method to add two integers\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    // Method to add three integers\n    public int add(int a, int b, int c) {\n        return a + b + c;\n    }\n\n    // Method to concatenate two strings\n    public String add(String str1, String str2) {\n        return str1 + str2;\n    }\n}\n</string>
    <string name="method_overriding_prog">// Base class (superclass)\nclass Animal {\n    public void makeSound() {\n        System.out.println(\"Some generic sound\");\n    }\n}\n\n// Derived class (subclass)\nclass Dog extends Animal {\n    @Override\n    public void makeSound() {\n        System.out.println(\"Woof! Woof!\");\n    }\n}\n</string>
    <string name="constructor_def">\nIn Java, a constructor is a special method that is used to initialize objects of a class. It has the same name as the class and does not have a return type, not even void. Constructors are called automatically when an object of the class is created using the new keyword. They are used to set initial values for the object\'s attributes or perform any necessary setup.</string>
    <string name="constructor_def_prog">public class Car {\n    // Attributes\n    String make;\n    String model;\n    int year;\n\n    // Constructor\n    public Car(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    // Method to display information about the car\n    public void displayInfo() {\n        System.out.println(\"Make: \" + make);\n        System.out.println(\"Model: \" + model);\n        System.out.println(\"Year: \" + year);\n    }\n\n    public static void main(String[] args) {\n        // Creating an object of the Car class and invoking the constructor\n        Car myCar = new Car(\"Toyota\", \"Camry\", 2022);\n\n        // Calling a method on the object\n        myCar.displayInfo();\n    }\n}\n\n</string>


</resources>